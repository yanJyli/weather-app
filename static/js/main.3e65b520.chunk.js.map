{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleSearchChange","e","setState","searchQuery","target","value","sendRequest","state","fetch","then","response","json","weather","isLoading","name","display","handleSearchSubmit","key","this","className","main","temp","type","placeholder","onChange","onKeyDown","sys","country","DateTime","fromSeconds","dt","toLocaleString","DATE_HUGE","Math","round","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAQqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAbP,EAiBnBC,YAAc,WAAO,IACXH,EAAgB,EAAKI,MAArBJ,YAERK,MAAM,GAAD,OAxBO,2CAwBP,qBAAwBL,EAAxB,kBAvBO,mCAuBP,kBACFM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,EAAKR,SAAS,CACZU,QAASF,EACTG,WAAW,IAHK,IAKVD,EAAY,EAAKL,MAAjBK,QACJT,IAAcS,EAAQE,MAC1B,EAAKZ,SAAS,CAACa,QAAS,cA7BX,EAkCnBC,mBAAqB,SAACf,GAEN,UAAVA,EAAEgB,KAAmBT,OAIzB,EAAKN,SAAS,CACZW,WAAW,GACV,EAAKP,cAvCR,EAAKC,MAAQ,CACXJ,YAAa,GACbS,QAAS,KACTC,WAAW,EACXE,QAAS,QAPM,E,0CA6CnB,WAAU,IAAD,EAC8CG,KAAKX,MAAlDJ,EADD,EACCA,YAAaS,EADd,EACcA,QAASC,EADvB,EACuBA,UAAWE,EADlC,EACkCA,QAEzC,OACE,sBAAKI,UAAWP,GAAWA,EAAQQ,KAAKC,KAAO,EAAI,iBAAmB,YAAtE,UACE,uBACEC,KAAK,OACLC,YAAY,YACZJ,UAAU,eACVd,MAAOF,EACPqB,SAAUN,KAAKlB,mBACfyB,UAAWP,KAAKF,qBAGjBH,EAAY,qBAAKM,UAAU,WAAkB,KAC7CP,EACC,gCACE,sBAAKO,UAAU,mBAAf,UACE,sBAAKA,UAAU,WAAf,UACGP,EAAQE,KADX,KACmBF,EAAQc,IAAIC,WAE/B,qBAAKR,UAAU,OAAf,SACGS,WAASC,YAAYjB,EAAQkB,IAAIC,eAChCH,WAASI,gBAIf,sBAAKb,UAAU,kBAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBc,KAAKC,MAAMtB,EAAQQ,KAAKC,MAA/C,WACA,qBAAKF,UAAU,UAAf,SAA0BP,EAAQA,QAAQ,GAAGQ,aAI/C,qBAAKD,UAAU,eAAeJ,QAASA,EAAvC,4D,GA/EqBoB,aCIlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3e65b520.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { DateTime } from 'luxon';\n\nimport './App.css';\n\nconst API_URL = 'https://api.openweathermap.org/data/2.5/';\nconst API_KEY = '33178d46dea4c98a92d98aa6ea4ebc24';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchQuery: '',\n      weather: null,\n      isLoading: false,\n      display: 'none' \n    };\n  }\n\n  handleSearchChange = (e) => {\n    this.setState({\n      searchQuery: e.target.value,\n    });\n  };\n\n  sendRequest = () => {\n    const { searchQuery } = this.state;\n\n    fetch(`${API_URL}weather?q=${searchQuery}&appid=${API_KEY}&units=metric`)\n      .then((response) => response.json())\n      .then((response) => { \n        this.setState({\n          weather: response,\n          isLoading: false\n        }) \n        const { weather } = this.state;\n        if (searchQuery!==weather.name) {\n        this.setState({display: 'block'})\n        }\n      });\n  };\n\n  handleSearchSubmit = (e) => {\n\n    if (e.key !== 'Enter' && fetch) {      \n      return;\n    }\n\n    this.setState({\n      isLoading: true,\n    }, this.sendRequest);\n  };\n\n  render() {\n    const { searchQuery, weather, isLoading, display } = this.state;\n\n    return (\n      <div className={weather && weather.main.temp < 0 ? 'container cold' : 'container'}>\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          className=\"search-input\"\n          value={searchQuery}\n          onChange={this.handleSearchChange}\n          onKeyDown={this.handleSearchSubmit}\n        />\n        \n        {isLoading ? <div className=\"loader\"></div> : null}\n        {weather ? (\n          <div>\n            <div className=\"location-wrapper\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">\n                {DateTime.fromSeconds(weather.dt).toLocaleString(\n                  DateTime.DATE_HUGE\n                )}\n              </div>\n            </div>\n            <div className=\"weather-wrapper\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n            \n        ) : <div className='errorMessage' display={display}>You submitted a city that doesn't exist</div>}\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}